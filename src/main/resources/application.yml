spring:
  application:
    name: table-now
  thymeleaf:
    cache: false

  config:
    import: optional:file:.env[.properties]

  batch:
    job:
      enabled: false
    jdbc:
      initialize-schema: always #배포 후에는 never로 수정 권장
      schema: classpath:org/springframework/batch/core/schema-mysql.sql

  security:
    oauth2:
      client:
        # OAuth2 인증 제공자(카카오)에 대한 설정 정보를 포함합니다.
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

        # 클라이언트 애플리케이션(Spring Boot)에 대한 설정을 포함합니다.
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: http://localhost:8080/api/v1/auth/kakao
            authorization-grant-type: authorization_code
            client-authentication-method: POST
            client-name: Kakao
            scope:
              - name
              - profile_nickname
              - account_email
              - profile_image
              - phone_number
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: http://localhost:8080/api/v1/auth/naver
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            client-name: Naver
            scope:
              - name
              - nickname
              - email
              - profile_image
              - mobile

  datasource-meta:
    driver-class-name: com.mysql.cj.jdbc.Driver
    jdbc-url: jdbc:mysql://${AWS_RDS_HOST}:${AWS_RDS_PORT}/${AWS_RDS_META_DB_NAME}
    username: ${AWS_RDS_USERNAME}
    password: ${AWS_RDS_PASSWORD}

  datasource-data:
    driver-class-name: com.mysql.cj.jdbc.Driver
    jdbc-url: jdbc:mysql://${AWS_RDS_HOST}:${AWS_RDS_PORT}/${AWS_RDS_DB_NAME}
    username: ${AWS_RDS_USERNAME}
    password: ${AWS_RDS_PASSWORD}

  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        use_sql_comments: true
        dialect: org.hibernate.dialect.MySQLDialect

  jpa-data:
    hibernate:
      ddl-auto: none
      show-sql: true

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      ssl:
        enabled: true

  elasticsearch:
    uris: ${ELASTICSEARCH_URIS}

  cache:
    type: redis

  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: ${RABBITMQ_PORT}
    username: ${RABBITMQ_USER}
    password: ${RABBITMQ_PASSWORD}
    ssl:
      enabled: true

jwt:
  secret:
    key: ${JWT_SECRET_KEY}

toss:
  secret:
    key: ${TOSS_SECRET_KEY}

cloud:
  aws:
    credentials:
      accessKey: ${AWS_ACCESS_KEY}
      secretKey: ${AWS_SECRET_KEY}
    region:
      static: ${AWS_REGION}
    s3:
      bucket: ${AWS_S3_BUCKET}
      presigned-url-expiration: ${AWS_S3_PRESIGNED_EXPIRATION}

oauth:
  kakao:
    admin-key: ${KAKAO_ADMIN_KEY}
    unlink-uri: https://kapi.kakao.com/v1/user/unlink

chat:
  broker: rabbit  # or simple